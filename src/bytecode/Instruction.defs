#ifndef SKIP_CONTROL_INSTRUCTIONS
X(Unreachable , "unreachable"  , Control   , (0x00), (0, ()))
X(Nop         , "nop"          , Control   , (0x01), (0, ()))
X(Block       , "block"        , Control   , (0x02), (2, ((BlockResultType, Type), (Expression, Body))))
X(Loop        , "loop"         , Control   , (0x03), (2, ((BlockResultType, Type), (Expression, Body))))
X(If          , "if"           , Control   , (0x04), (3, ((BlockResultType, Type), (Expression, True), (std::optional<Expression>, False))))
X(Br          , "br"           , Control   , (0x0C), (1, ((LabelIDX, Target))))
X(BrIf        , "br_if"        , Control   , (0x0D), (1, ((LabelIDX, Target))))
X(BrTable     , "br_table"     , Control   , (0x0E), (2, ((std::vector<LabelIDX>, Targets), (LabelIDX, DefaultTarget))))
X(Return      , "return"       , Control   , (0x0F), (0, ()))
X(Call        , "call"         , Control   , (0x10), (1, ((FuncIDX, Target))))
X(CallIndirect, "call_indirect", Control   , (0x11), (1, ((TypeIDX, Type))))
#endif

#ifndef SKIP_PARAMETRIC_INSTRUCTIONS
X(Drop        , "drop"         , Parametric, (0x1A), (0, ()))
X(Select      , "select"       , Parametric, (0x1B), (0, ()))
#endif

#ifndef SKIP_VARIABLE_INSTRUCTIONS
X(LocalGet    , "local.get"    , Variable  , (0x20), (1, ((LocalIDX, Target))))
X(LocalSet    , "local.set"    , Variable  , (0x21), (1, ((LocalIDX, Target))))
X(LocalTee    , "local.tee"    , Variable  , (0x22), (1, ((LocalIDX, Target))))
X(GlobalGet   , "global.get"   , Variable  , (0x23), (1, ((GlobalIDX, Target))))
X(GlobalSet   , "global.set"   , Variable  , (0x24), (1, ((GlobalIDX, Target))))
#endif

#ifndef SKIP_MEMORY_INSTRUCTIONS
X(I32Load     , "i32.load"     , Memory    , (0x28), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load     , "i64.load"     , Memory    , (0x29), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(F32Load     , "f32.load"     , Memory    , (0x2A), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(F64Load     , "f64.load"     , Memory    , (0x2B), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Load8S   , "i32.load8_s"  , Memory    , (0x2C), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Load8U   , "i32.load8_u"  , Memory    , (0x2D), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Load16S  , "i32.load16_s" , Memory    , (0x2E), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Load16U  , "i32.load16_u" , Memory    , (0x2F), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load8S   , "i64.load8_s"  , Memory    , (0x30), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load8U   , "i64.load8_u"  , Memory    , (0x31), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load16S  , "i64.load16_s" , Memory    , (0x32), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load16U  , "i64.load16_u" , Memory    , (0x33), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load32S  , "i64.load32_s" , Memory    , (0x34), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load32U  , "i64.load32_u" , Memory    , (0x35), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Store    , "i32.store"    , Memory    , (0x36), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Store    , "i64.store"    , Memory    , (0x37), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(F32Store    , "f32.store"    , Memory    , (0x38), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(F64Store    , "f64.store"    , Memory    , (0x39), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Store8   , "i32.store8"   , Memory    , (0x3A), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Store16  , "i32.store16"  , Memory    , (0x3B), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Store8   , "i64.store8"   , Memory    , (0x3C), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Store16  , "i64.store16"  , Memory    , (0x3D), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Store32  , "i64.store32"  , Memory    , (0x3E), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(MemorySize  , "memory.size"  , Memory    , (0x3F), (0, ()))
X(MemoryGrow  , "memory.grow"  , Memory    , (0x40), (0, ()))
#endif

#ifndef SKIP_NUMERIC_INSTRUCTIONS
X(I32Const    , "i32.const"    , Numeric   , (0x41), (1, ((std::int32_t, Value))))
X(I64Const    , "i64.const"    , Numeric   , (0x42), (1, ((std::int64_t, Value))))
X(F32Const    , "f32.const"    , Numeric   , (0x43), (1, ((float, Value))))
X(F64Const    , "f64.const"    , Numeric   , (0x44), (1, ((double, Value))))

X(I32Eqz      , "i32.eqz"      , Numeric   , (0x45), (0, ()))
X(I32Eq       , "i32.eq"       , Numeric   , (0x46), (0, ()))
X(I32Ne       , "i32.ne"       , Numeric   , (0x47), (0, ()))
X(I32LtS      , "i32.lt_s"     , Numeric   , (0x48), (0, ()))
X(I32LtU      , "i32.lt_u"     , Numeric   , (0x49), (0, ()))
X(I32GtS      , "i32.gt_s"     , Numeric   , (0x4A), (0, ()))
X(I32GtU      , "i32.gt_u"     , Numeric   , (0x4B), (0, ()))
X(I32LeS      , "i32.le_s"     , Numeric   , (0x4C), (0, ()))
X(I32LeU      , "i32.le_u"     , Numeric   , (0x4D), (0, ()))
X(I32GeS      , "i32.ge_s"     , Numeric   , (0x4E), (0, ()))
X(I32GeU      , "i32.ge_u"     , Numeric   , (0x4F), (0, ()))

X(I64Eqz      , "i64.eqz"      , Numeric   , (0x50), (0, ()))
X(I64Eq       , "i64.eq"       , Numeric   , (0x51), (0, ()))
X(I64Ne       , "i64.ne"       , Numeric   , (0x52), (0, ()))
X(I64LtS      , "i64.lt_s"     , Numeric   , (0x53), (0, ()))
X(I64LtU      , "i64.lt_u"     , Numeric   , (0x54), (0, ()))
X(I64GtS      , "i64.gt_s"     , Numeric   , (0x55), (0, ()))
X(I64GtU      , "i64.gt_u"     , Numeric   , (0x56), (0, ()))
X(I64LeS      , "i64.le_s"     , Numeric   , (0x57), (0, ()))
X(I64LeU      , "i64.le_u"     , Numeric   , (0x58), (0, ()))
X(I64GeS      , "i64.ge_s"     , Numeric   , (0x59), (0, ()))
X(I64GeU      , "i64.ge_u"     , Numeric   , (0x5A), (0, ()))

X(F32Eq       , "f32.eq"       , Numeric   , (0x5B), (0, ()))
X(F32Ne       , "f32.ne"       , Numeric   , (0x5C), (0, ()))
X(F32Lt       , "f32.lt"       , Numeric   , (0x5D), (0, ()))
X(F32Gt       , "f32.gt"       , Numeric   , (0x5E), (0, ()))
X(F32Le       , "f32.le"       , Numeric   , (0x5F), (0, ()))
X(F32Ge       , "f32.ge"       , Numeric   , (0x60), (0, ()))

X(F64Eq       , "f64.eq"       , Numeric   , (0x61), (0, ()))
X(F64Ne       , "f64.ne"       , Numeric   , (0x62), (0, ()))
X(F64Lt       , "f64.lt"       , Numeric   , (0x63), (0, ()))
X(F64Gt       , "f64.gt"       , Numeric   , (0x64), (0, ()))
X(F64Le       , "f64.le"       , Numeric   , (0x65), (0, ()))
X(F64Ge       , "f64.ge"       , Numeric   , (0x66), (0, ()))

X(I32Clz      , "i32.clz"      , Numeric   , (0x67), (0, ()))
X(I32Ctz      , "i32.ctz"      , Numeric   , (0x68), (0, ()))
X(I32Popcnt   , "i32.popcnt"   , Numeric   , (0x69), (0, ()))
X(I32Add      , "i32.add"      , Numeric   , (0x6A), (0, ()))
X(I32Sub      , "i32.sub"      , Numeric   , (0x6B), (0, ()))
X(I32Mul      , "i32.mul"      , Numeric   , (0x6C), (0, ()))
X(I32DivS     , "i32.div_s"    , Numeric   , (0x6D), (0, ()))
X(I32DivU     , "i32.div_u"    , Numeric   , (0x6E), (0, ()))
X(I32RemS     , "i32.rem_s"    , Numeric   , (0x6F), (0, ()))
X(I32RemU     , "i32.rem_u"    , Numeric   , (0x70), (0, ()))
X(I32And      , "i32.and"      , Numeric   , (0x71), (0, ()))
X(I32Or       , "i32.or"       , Numeric   , (0x72), (0, ()))
X(I32Xor      , "i32.xor"      , Numeric   , (0x73), (0, ()))
X(I32Shl      , "i32.shl"      , Numeric   , (0x74), (0, ()))
X(I32ShrS     , "i32.shr_s"    , Numeric   , (0x75), (0, ()))
X(I32ShrU     , "i32.shr_u"    , Numeric   , (0x76), (0, ()))
X(I32Rotl     , "i32.rotl"     , Numeric   , (0x77), (0, ()))
X(I32Rotr     , "i32.rotr"     , Numeric   , (0x78), (0, ()))

X(I64Clz      , "i64.clz"      , Numeric   , (0x79), (0, ()))
X(I64Ctz      , "i64.ctz"      , Numeric   , (0x7A), (0, ()))
X(I64Popcnt   , "i64.popcnt"   , Numeric   , (0x7B), (0, ()))
X(I64Add      , "i64.add"      , Numeric   , (0x7C), (0, ()))
X(I64Sub      , "i64.sub"      , Numeric   , (0x7D), (0, ()))
X(I64Mul      , "i64.mul"      , Numeric   , (0x7E), (0, ()))
X(I64DivS     , "i64.div_s"    , Numeric   , (0x7F), (0, ()))
X(I64DivU     , "i64.div_u"    , Numeric   , (0x80), (0, ()))
X(I64RemS     , "i64.rem_s"    , Numeric   , (0x81), (0, ()))
X(I64RemU     , "i64.rem_u"    , Numeric   , (0x82), (0, ()))
X(I64And      , "i64.and"      , Numeric   , (0x83), (0, ()))
X(I64Or       , "i64.or"       , Numeric   , (0x84), (0, ()))
X(I64Xor      , "i64.xor"      , Numeric   , (0x85), (0, ()))
X(I64Shl      , "i64.shl"      , Numeric   , (0x86), (0, ()))
X(I64ShrS     , "i64.shr_s"    , Numeric   , (0x87), (0, ()))
X(I64ShrU     , "i64.shr_u"    , Numeric   , (0x88), (0, ()))
X(I64Rotl     , "i64.rotl"     , Numeric   , (0x89), (0, ()))
X(I64Rotr     , "i64.rotr"     , Numeric   , (0x8A), (0, ()))

X(F32Abs      , "f32.abs"      , Numeric   , (0x8B), (0, ()))
X(F32Neg      , "f32.neg"      , Numeric   , (0x8C), (0, ()))
X(F32Ceil     , "f32.ceil"     , Numeric   , (0x8D), (0, ()))
X(F32Floor    , "f32.floor"    , Numeric   , (0x8E), (0, ()))
X(F32Trunc    , "f32.trunc"    , Numeric   , (0x8F), (0, ()))
X(F32Nearest  , "f32.nearest"  , Numeric   , (0x90), (0, ()))
X(F32Sqrt     , "f32.sqrt"     , Numeric   , (0x91), (0, ()))
X(F32Add      , "f32.add"      , Numeric   , (0x92), (0, ()))
X(F32Sub      , "f32.sub"      , Numeric   , (0x93), (0, ()))
X(F32Mul      , "f32.mul"      , Numeric   , (0x94), (0, ()))
X(F32Div      , "f32.div"      , Numeric   , (0x95), (0, ()))
X(F32Min      , "f32.min"      , Numeric   , (0x96), (0, ()))
X(F32Max      , "f32.max"      , Numeric   , (0x97), (0, ()))
X(F32CopySign , "f32.copysign" , Numeric   , (0x98), (0, ()))

X(F64Abs      , "f64.abs"      , Numeric   , (0x99), (0, ()))
X(F64Neg      , "f64.neg"      , Numeric   , (0x9A), (0, ()))
X(F64Ceil     , "f64.ceil"     , Numeric   , (0x9B), (0, ()))
X(F64Floor    , "f64.floor"    , Numeric   , (0x9C), (0, ()))
X(F64Trunc    , "f64.trunc"    , Numeric   , (0x9D), (0, ()))
X(F64Nearest  , "f64.nearest"  , Numeric   , (0x9E), (0, ()))
X(F64Sqrt     , "f64.sqrt"     , Numeric   , (0x9F), (0, ()))
X(F64Add      , "f64.add"      , Numeric   , (0xA0), (0, ()))
X(F64Sub      , "f64.sub"      , Numeric   , (0xA1), (0, ()))
X(F64Mul      , "f64.mul"      , Numeric   , (0xA2), (0, ()))
X(F64Div      , "f64.div"      , Numeric   , (0xA3), (0, ()))
X(F64Min      , "f64.min"      , Numeric   , (0xA4), (0, ()))
X(F64Max      , "f64.max"      , Numeric   , (0xA5), (0, ()))
X(F64CopySign , "f64.copysign" , Numeric   , (0xA6), (0, ()))

X(I32WrapI64       , "i32.wrap_i64"       , Numeric, (0xA7), (0, ()))
X(I32TruncF32S     , "i32.trunc_f32_s"    , Numeric, (0xA8), (0, ()))
X(I32TruncF32U     , "i32.trunc_f32_u"    , Numeric, (0xA9), (0, ()))
X(I32TruncF64S     , "i32.trunc_f64_s"    , Numeric, (0xAA), (0, ()))
X(I32TruncF64U     , "i32.trunc_f64_u"    , Numeric, (0xAB), (0, ()))
X(I64ExtendI32S    , "i64.extend_i32_s"   , Numeric, (0xAC), (0, ()))
X(I64ExtendI32U    , "i64.extend_i32_u"   , Numeric, (0xAD), (0, ()))
X(I64TruncF32S     , "i64.trunc_f32_s"    , Numeric, (0xAE), (0, ()))
X(I64TruncF32U     , "i64.trunc_f32_u"    , Numeric, (0xAF), (0, ()))
X(I64TruncF64S     , "i64.trunc_f64_s"    , Numeric, (0xB0), (0, ()))
X(I64TruncF64U     , "i64.trunc_f64_u"    , Numeric, (0xB1), (0, ()))
X(F32ConvertI32S   , "f32.convert_i32_s"  , Numeric, (0xB2), (0, ()))
X(F32ConvertI32U   , "f32.convert_i32_u"  , Numeric, (0xB3), (0, ()))
X(F32ConvertI64S   , "f32.convert_i64_s"  , Numeric, (0xB4), (0, ()))
X(F32ConvertI64U   , "f32.convert_i64_u"  , Numeric, (0xB5), (0, ()))
X(F32DemoteF64     , "f32.demote_f64"     , Numeric, (0xB6), (0, ()))
X(F64ConvertI32S   , "f64.convert_i32_s"  , Numeric, (0xB7), (0, ()))
X(F64ConvertI32U   , "f64.convert_i32_u"  , Numeric, (0xB8), (0, ()))
X(F64ConvertI64S   , "f64.convert_i64_s"  , Numeric, (0xB9), (0, ()))
X(F64ConvertI64U   , "f64.convert_i64_u"  , Numeric, (0xBA), (0, ()))
X(F64PromoteF32    , "f64.promote_f32"    , Numeric, (0xBB), (0, ()))
X(I32ReinterpretF32, "i32.reinterpret_f32", Numeric, (0xBC), (0, ()))
X(I64ReinterpretF64, "i64.reinterpret_f64", Numeric, (0xBD), (0, ()))
X(F32ReinterpretI32, "f32.reinterpret_i32", Numeric, (0xBE), (0, ()))
X(F64ReinterpretI64, "f64.reinterpret_i64", Numeric, (0xBF), (0, ()))
#endif

#ifndef SKIP_SIGN_EXTENSION_OPS_INSTRUCTIONS
X(I32Extend8S , "i32.extend8_s" , SignExtensionOps, (0xC0), (0, ()))
X(I32Extend16S, "i32.extend16_s", SignExtensionOps, (0xC1), (0, ()))
X(I64Extend8S , "i64.extend8_s" , SignExtensionOps, (0xC2), (0, ()))
X(I64Extend16S, "i64.extend16_s", SignExtensionOps, (0xC3), (0, ()))
X(I64Extend32S, "i64.extend32_s", SignExtensionOps, (0xC4), (0, ()))
#endif

#ifndef SKIP_NONTRAPPING_FLOAT_TO_INT_CONVS_INSTRUCTIONS
X(I32TruncSatF32S, "i32.trunc_sat_f32_s", NontrappingFloatToIntConvs, (0xFC, 0x00), (0, ()))
X(I32TruncSatF32U, "i32.trunc_sat_f32_u", NontrappingFloatToIntConvs, (0xFC, 0x01), (0, ()))
X(I32TruncSatF64S, "i32.trunc_sat_f64_s", NontrappingFloatToIntConvs, (0xFC, 0x02), (0, ()))
X(I32TruncSatF64U, "i32.trunc_sat_f64_u", NontrappingFloatToIntConvs, (0xFC, 0x03), (0, ()))
X(I64TruncSatF32S, "i64.trunc_sat_f32_s", NontrappingFloatToIntConvs, (0xFC, 0x04), (0, ()))
X(I64TruncSatF32U, "i64.trunc_sat_f32_u", NontrappingFloatToIntConvs, (0xFC, 0x05), (0, ()))
X(I64TruncSatF64S, "i64.trunc_sat_f64_s", NontrappingFloatToIntConvs, (0xFC, 0x06), (0, ()))
X(I64TruncSatF64U, "i64.trunc_sat_f64_u", NontrappingFloatToIntConvs, (0xFC, 0x07), (0, ()))
#endif