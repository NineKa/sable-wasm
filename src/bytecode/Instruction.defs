#ifndef SABLE_SKIP_CONTROL_INSTRUCTIONS
X(Unreachable , "unreachable"  , Control   , (0x00), (0, ()))
X(Nop         , "nop"          , Control   , (0x01), (0, ()))
X(Block       , "block"        , Control   , (0x02), (2, ((BlockResultType, Type), (Expression, Body))))
X(Loop        , "loop"         , Control   , (0x03), (2, ((BlockResultType, Type), (Expression, Body))))
X(If          , "if"           , Control   , (0x04), (3, ((BlockResultType, Type), (Expression, True), (std::optional<Expression>, False))))
X(Br          , "br"           , Control   , (0x0C), (1, ((LabelIDX, Target))))
X(BrIf        , "br_if"        , Control   , (0x0D), (1, ((LabelIDX, Target))))
X(BrTable     , "br_table"     , Control   , (0x0E), (2, ((std::vector<LabelIDX>, Targets), (LabelIDX, DefaultTarget))))
X(Return      , "return"       , Control   , (0x0F), (0, ()))
X(Call        , "call"         , Control   , (0x10), (1, ((FuncIDX, Target))))
X(CallIndirect, "call_indirect", Control   , (0x11), (1, ((TypeIDX, Type))))
#endif

#ifndef SABLE_SKIP_PARAMETRIC_INSTRUCTIONS
X(Drop        , "drop"         , Parametric, (0x1A), (0, ()))
X(Select      , "select"       , Parametric, (0x1B), (0, ()))
#endif

#ifndef SABLE_SKIP_VARIABLE_INSTRUCTIONS
X(LocalGet    , "local.get"    , Variable  , (0x20), (1, ((LocalIDX, Target))))
X(LocalSet    , "local.set"    , Variable  , (0x21), (1, ((LocalIDX, Target))))
X(LocalTee    , "local.tee"    , Variable  , (0x22), (1, ((LocalIDX, Target))))
X(GlobalGet   , "global.get"   , Variable  , (0x23), (1, ((GlobalIDX, Target))))
X(GlobalSet   , "global.set"   , Variable  , (0x24), (1, ((GlobalIDX, Target))))
#endif

#ifndef SABLE_SKIP_MEMORY_INSTRUCTIONS
X(I32Load     , "i32.load"     , Memory    , (0x28), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load     , "i64.load"     , Memory    , (0x29), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(F32Load     , "f32.load"     , Memory    , (0x2A), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(F64Load     , "f64.load"     , Memory    , (0x2B), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Load8S   , "i32.load8_s"  , Memory    , (0x2C), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Load8U   , "i32.load8_u"  , Memory    , (0x2D), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Load16S  , "i32.load16_s" , Memory    , (0x2E), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Load16U  , "i32.load16_u" , Memory    , (0x2F), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load8S   , "i64.load8_s"  , Memory    , (0x30), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load8U   , "i64.load8_u"  , Memory    , (0x31), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load16S  , "i64.load16_s" , Memory    , (0x32), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load16U  , "i64.load16_u" , Memory    , (0x33), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load32S  , "i64.load32_s" , Memory    , (0x34), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Load32U  , "i64.load32_u" , Memory    , (0x35), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Store    , "i32.store"    , Memory    , (0x36), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Store    , "i64.store"    , Memory    , (0x37), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(F32Store    , "f32.store"    , Memory    , (0x38), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(F64Store    , "f64.store"    , Memory    , (0x39), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Store8   , "i32.store8"   , Memory    , (0x3A), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I32Store16  , "i32.store16"  , Memory    , (0x3B), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Store8   , "i64.store8"   , Memory    , (0x3C), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Store16  , "i64.store16"  , Memory    , (0x3D), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(I64Store32  , "i64.store32"  , Memory    , (0x3E), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(MemorySize  , "memory.size"  , Memory    , (0x3F), (0, ()))
X(MemoryGrow  , "memory.grow"  , Memory    , (0x40), (0, ()))
#endif

#ifndef SABLE_SKIP_NUMERIC_INSTRUCTIONS
X(I32Const    , "i32.const"    , Numeric   , (0x41), (1, ((std::int32_t, Value))))
X(I64Const    , "i64.const"    , Numeric   , (0x42), (1, ((std::int64_t, Value))))
X(F32Const    , "f32.const"    , Numeric   , (0x43), (1, ((float, Value))))
X(F64Const    , "f64.const"    , Numeric   , (0x44), (1, ((double, Value))))

X(I32Eqz      , "i32.eqz"      , Numeric   , (0x45), (0, ()))
X(I32Eq       , "i32.eq"       , Numeric   , (0x46), (0, ()))
X(I32Ne       , "i32.ne"       , Numeric   , (0x47), (0, ()))
X(I32LtS      , "i32.lt_s"     , Numeric   , (0x48), (0, ()))
X(I32LtU      , "i32.lt_u"     , Numeric   , (0x49), (0, ()))
X(I32GtS      , "i32.gt_s"     , Numeric   , (0x4A), (0, ()))
X(I32GtU      , "i32.gt_u"     , Numeric   , (0x4B), (0, ()))
X(I32LeS      , "i32.le_s"     , Numeric   , (0x4C), (0, ()))
X(I32LeU      , "i32.le_u"     , Numeric   , (0x4D), (0, ()))
X(I32GeS      , "i32.ge_s"     , Numeric   , (0x4E), (0, ()))
X(I32GeU      , "i32.ge_u"     , Numeric   , (0x4F), (0, ()))

X(I64Eqz      , "i64.eqz"      , Numeric   , (0x50), (0, ()))
X(I64Eq       , "i64.eq"       , Numeric   , (0x51), (0, ()))
X(I64Ne       , "i64.ne"       , Numeric   , (0x52), (0, ()))
X(I64LtS      , "i64.lt_s"     , Numeric   , (0x53), (0, ()))
X(I64LtU      , "i64.lt_u"     , Numeric   , (0x54), (0, ()))
X(I64GtS      , "i64.gt_s"     , Numeric   , (0x55), (0, ()))
X(I64GtU      , "i64.gt_u"     , Numeric   , (0x56), (0, ()))
X(I64LeS      , "i64.le_s"     , Numeric   , (0x57), (0, ()))
X(I64LeU      , "i64.le_u"     , Numeric   , (0x58), (0, ()))
X(I64GeS      , "i64.ge_s"     , Numeric   , (0x59), (0, ()))
X(I64GeU      , "i64.ge_u"     , Numeric   , (0x5A), (0, ()))

X(F32Eq       , "f32.eq"       , Numeric   , (0x5B), (0, ()))
X(F32Ne       , "f32.ne"       , Numeric   , (0x5C), (0, ()))
X(F32Lt       , "f32.lt"       , Numeric   , (0x5D), (0, ()))
X(F32Gt       , "f32.gt"       , Numeric   , (0x5E), (0, ()))
X(F32Le       , "f32.le"       , Numeric   , (0x5F), (0, ()))
X(F32Ge       , "f32.ge"       , Numeric   , (0x60), (0, ()))

X(F64Eq       , "f64.eq"       , Numeric   , (0x61), (0, ()))
X(F64Ne       , "f64.ne"       , Numeric   , (0x62), (0, ()))
X(F64Lt       , "f64.lt"       , Numeric   , (0x63), (0, ()))
X(F64Gt       , "f64.gt"       , Numeric   , (0x64), (0, ()))
X(F64Le       , "f64.le"       , Numeric   , (0x65), (0, ()))
X(F64Ge       , "f64.ge"       , Numeric   , (0x66), (0, ()))

X(I32Clz      , "i32.clz"      , Numeric   , (0x67), (0, ()))
X(I32Ctz      , "i32.ctz"      , Numeric   , (0x68), (0, ()))
X(I32Popcnt   , "i32.popcnt"   , Numeric   , (0x69), (0, ()))
X(I32Add      , "i32.add"      , Numeric   , (0x6A), (0, ()))
X(I32Sub      , "i32.sub"      , Numeric   , (0x6B), (0, ()))
X(I32Mul      , "i32.mul"      , Numeric   , (0x6C), (0, ()))
X(I32DivS     , "i32.div_s"    , Numeric   , (0x6D), (0, ()))
X(I32DivU     , "i32.div_u"    , Numeric   , (0x6E), (0, ()))
X(I32RemS     , "i32.rem_s"    , Numeric   , (0x6F), (0, ()))
X(I32RemU     , "i32.rem_u"    , Numeric   , (0x70), (0, ()))
X(I32And      , "i32.and"      , Numeric   , (0x71), (0, ()))
X(I32Or       , "i32.or"       , Numeric   , (0x72), (0, ()))
X(I32Xor      , "i32.xor"      , Numeric   , (0x73), (0, ()))
X(I32Shl      , "i32.shl"      , Numeric   , (0x74), (0, ()))
X(I32ShrS     , "i32.shr_s"    , Numeric   , (0x75), (0, ()))
X(I32ShrU     , "i32.shr_u"    , Numeric   , (0x76), (0, ()))
X(I32Rotl     , "i32.rotl"     , Numeric   , (0x77), (0, ()))
X(I32Rotr     , "i32.rotr"     , Numeric   , (0x78), (0, ()))

X(I64Clz      , "i64.clz"      , Numeric   , (0x79), (0, ()))
X(I64Ctz      , "i64.ctz"      , Numeric   , (0x7A), (0, ()))
X(I64Popcnt   , "i64.popcnt"   , Numeric   , (0x7B), (0, ()))
X(I64Add      , "i64.add"      , Numeric   , (0x7C), (0, ()))
X(I64Sub      , "i64.sub"      , Numeric   , (0x7D), (0, ()))
X(I64Mul      , "i64.mul"      , Numeric   , (0x7E), (0, ()))
X(I64DivS     , "i64.div_s"    , Numeric   , (0x7F), (0, ()))
X(I64DivU     , "i64.div_u"    , Numeric   , (0x80), (0, ()))
X(I64RemS     , "i64.rem_s"    , Numeric   , (0x81), (0, ()))
X(I64RemU     , "i64.rem_u"    , Numeric   , (0x82), (0, ()))
X(I64And      , "i64.and"      , Numeric   , (0x83), (0, ()))
X(I64Or       , "i64.or"       , Numeric   , (0x84), (0, ()))
X(I64Xor      , "i64.xor"      , Numeric   , (0x85), (0, ()))
X(I64Shl      , "i64.shl"      , Numeric   , (0x86), (0, ()))
X(I64ShrS     , "i64.shr_s"    , Numeric   , (0x87), (0, ()))
X(I64ShrU     , "i64.shr_u"    , Numeric   , (0x88), (0, ()))
X(I64Rotl     , "i64.rotl"     , Numeric   , (0x89), (0, ()))
X(I64Rotr     , "i64.rotr"     , Numeric   , (0x8A), (0, ()))

X(F32Abs      , "f32.abs"      , Numeric   , (0x8B), (0, ()))
X(F32Neg      , "f32.neg"      , Numeric   , (0x8C), (0, ()))
X(F32Ceil     , "f32.ceil"     , Numeric   , (0x8D), (0, ()))
X(F32Floor    , "f32.floor"    , Numeric   , (0x8E), (0, ()))
X(F32Trunc    , "f32.trunc"    , Numeric   , (0x8F), (0, ()))
X(F32Nearest  , "f32.nearest"  , Numeric   , (0x90), (0, ()))
X(F32Sqrt     , "f32.sqrt"     , Numeric   , (0x91), (0, ()))
X(F32Add      , "f32.add"      , Numeric   , (0x92), (0, ()))
X(F32Sub      , "f32.sub"      , Numeric   , (0x93), (0, ()))
X(F32Mul      , "f32.mul"      , Numeric   , (0x94), (0, ()))
X(F32Div      , "f32.div"      , Numeric   , (0x95), (0, ()))
X(F32Min      , "f32.min"      , Numeric   , (0x96), (0, ()))
X(F32Max      , "f32.max"      , Numeric   , (0x97), (0, ()))
X(F32CopySign , "f32.copysign" , Numeric   , (0x98), (0, ()))

X(F64Abs      , "f64.abs"      , Numeric   , (0x99), (0, ()))
X(F64Neg      , "f64.neg"      , Numeric   , (0x9A), (0, ()))
X(F64Ceil     , "f64.ceil"     , Numeric   , (0x9B), (0, ()))
X(F64Floor    , "f64.floor"    , Numeric   , (0x9C), (0, ()))
X(F64Trunc    , "f64.trunc"    , Numeric   , (0x9D), (0, ()))
X(F64Nearest  , "f64.nearest"  , Numeric   , (0x9E), (0, ()))
X(F64Sqrt     , "f64.sqrt"     , Numeric   , (0x9F), (0, ()))
X(F64Add      , "f64.add"      , Numeric   , (0xA0), (0, ()))
X(F64Sub      , "f64.sub"      , Numeric   , (0xA1), (0, ()))
X(F64Mul      , "f64.mul"      , Numeric   , (0xA2), (0, ()))
X(F64Div      , "f64.div"      , Numeric   , (0xA3), (0, ()))
X(F64Min      , "f64.min"      , Numeric   , (0xA4), (0, ()))
X(F64Max      , "f64.max"      , Numeric   , (0xA5), (0, ()))
X(F64CopySign , "f64.copysign" , Numeric   , (0xA6), (0, ()))

X(I32WrapI64       , "i32.wrap_i64"       , Numeric, (0xA7), (0, ()))
X(I32TruncF32S     , "i32.trunc_f32_s"    , Numeric, (0xA8), (0, ()))
X(I32TruncF32U     , "i32.trunc_f32_u"    , Numeric, (0xA9), (0, ()))
X(I32TruncF64S     , "i32.trunc_f64_s"    , Numeric, (0xAA), (0, ()))
X(I32TruncF64U     , "i32.trunc_f64_u"    , Numeric, (0xAB), (0, ()))
X(I64ExtendI32S    , "i64.extend_i32_s"   , Numeric, (0xAC), (0, ()))
X(I64ExtendI32U    , "i64.extend_i32_u"   , Numeric, (0xAD), (0, ()))
X(I64TruncF32S     , "i64.trunc_f32_s"    , Numeric, (0xAE), (0, ()))
X(I64TruncF32U     , "i64.trunc_f32_u"    , Numeric, (0xAF), (0, ()))
X(I64TruncF64S     , "i64.trunc_f64_s"    , Numeric, (0xB0), (0, ()))
X(I64TruncF64U     , "i64.trunc_f64_u"    , Numeric, (0xB1), (0, ()))
X(F32ConvertI32S   , "f32.convert_i32_s"  , Numeric, (0xB2), (0, ()))
X(F32ConvertI32U   , "f32.convert_i32_u"  , Numeric, (0xB3), (0, ()))
X(F32ConvertI64S   , "f32.convert_i64_s"  , Numeric, (0xB4), (0, ()))
X(F32ConvertI64U   , "f32.convert_i64_u"  , Numeric, (0xB5), (0, ()))
X(F32DemoteF64     , "f32.demote_f64"     , Numeric, (0xB6), (0, ()))
X(F64ConvertI32S   , "f64.convert_i32_s"  , Numeric, (0xB7), (0, ()))
X(F64ConvertI32U   , "f64.convert_i32_u"  , Numeric, (0xB8), (0, ()))
X(F64ConvertI64S   , "f64.convert_i64_s"  , Numeric, (0xB9), (0, ()))
X(F64ConvertI64U   , "f64.convert_i64_u"  , Numeric, (0xBA), (0, ()))
X(F64PromoteF32    , "f64.promote_f32"    , Numeric, (0xBB), (0, ()))
X(I32ReinterpretF32, "i32.reinterpret_f32", Numeric, (0xBC), (0, ()))
X(I64ReinterpretF64, "i64.reinterpret_f64", Numeric, (0xBD), (0, ()))
X(F32ReinterpretI32, "f32.reinterpret_i32", Numeric, (0xBE), (0, ()))
X(F64ReinterpretI64, "f64.reinterpret_i64", Numeric, (0xBF), (0, ()))
#endif

#ifndef SABLE_SKIP_SIGN_EXTENSION_OPS_INSTRUCTIONS
X(I32Extend8S , "i32.extend8_s" , SignExtensionOps, (0xC0), (0, ()))
X(I32Extend16S, "i32.extend16_s", SignExtensionOps, (0xC1), (0, ()))
X(I64Extend8S , "i64.extend8_s" , SignExtensionOps, (0xC2), (0, ()))
X(I64Extend16S, "i64.extend16_s", SignExtensionOps, (0xC3), (0, ()))
X(I64Extend32S, "i64.extend32_s", SignExtensionOps, (0xC4), (0, ()))
#endif

#ifndef SABLE_SKIP_NONTRAPPING_FLOAT_TO_INT_CONVS_INSTRUCTIONS
X(I32TruncSatF32S, "i32.trunc_sat_f32_s", NontrappingFloatToIntConvs, (0xFC, 0x00), (0, ()))
X(I32TruncSatF32U, "i32.trunc_sat_f32_u", NontrappingFloatToIntConvs, (0xFC, 0x01), (0, ()))
X(I32TruncSatF64S, "i32.trunc_sat_f64_s", NontrappingFloatToIntConvs, (0xFC, 0x02), (0, ()))
X(I32TruncSatF64U, "i32.trunc_sat_f64_u", NontrappingFloatToIntConvs, (0xFC, 0x03), (0, ()))
X(I64TruncSatF32S, "i64.trunc_sat_f32_s", NontrappingFloatToIntConvs, (0xFC, 0x04), (0, ()))
X(I64TruncSatF32U, "i64.trunc_sat_f32_u", NontrappingFloatToIntConvs, (0xFC, 0x05), (0, ()))
X(I64TruncSatF64S, "i64.trunc_sat_f64_s", NontrappingFloatToIntConvs, (0xFC, 0x06), (0, ()))
X(I64TruncSatF64U, "i64.trunc_sat_f64_u", NontrappingFloatToIntConvs, (0xFC, 0x07), (0, ()))
#endif

#ifndef SABLE_SKIP_SIMD_INSTRUCTIONS
X(V128Load                 , "v128.load"                    , SIMD128, (0xFD, 0x00), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load8x8S             , "v128.load8x8_s"               , SIMD128, (0xFD, 0x01), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load8x8U             , "v128.load8x8_u"               , SIMD128, (0xFD, 0x02), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load16x4S            , "v128.load16x4_s"              , SIMD128, (0xFD, 0x03), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load16x4U            , "v128.load16x4_u"              , SIMD128, (0xFD, 0x04), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load32x2S            , "v128.load32x2_s"              , SIMD128, (0xFD, 0x05), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load32x2U            , "v128.load32x2_u"              , SIMD128, (0xFD, 0x06), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load8Splat           , "v128.load8_splat"             , SIMD128, (0xFD, 0x07), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load16Splat          , "v128.load16_splat"            , SIMD128, (0xFD, 0x08), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load32Splat          , "v128.load32_splat"            , SIMD128, (0xFD, 0x09), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load64Splat          , "v128.load64_splat"            , SIMD128, (0xFD, 0x0A), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load32Zero           , "v128.load32_zero"             , SIMD128, (0xFD, 0x5C), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load64Zero           , "v128.load64_zero"             , SIMD128, (0xFD, 0x5D), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Load8Lane            , "v128.load8_lane"              , SIMD128, (0xFD, 0x54), (3, ((std::uint32_t, Align), (std::uint32_t, Offset), (SIMDLaneID, Index))))
X(V128Load16Lane           , "v128.load16_lane"             , SIMD128, (0xFD, 0x55), (3, ((std::uint32_t, Align), (std::uint32_t, Offset), (SIMDLaneID, Index))))
X(V128Load32Lane           , "v128.load32_lane"             , SIMD128, (0xFD, 0x56), (3, ((std::uint32_t, Align), (std::uint32_t, Offset), (SIMDLaneID, Index))))
X(V128Load64Lane           , "v128.load64_lane"             , SIMD128, (0xFD, 0x57), (3, ((std::uint32_t, Align), (std::uint32_t, Offset), (SIMDLaneID, Index))))

X(V128Store                , "v128.store"                   , SIMD128, (0xFD, 0x0B), (2, ((std::uint32_t, Align), (std::uint32_t, Offset))))
X(V128Store8Lane           , "v128.store8_lane"             , SIMD128, (0xFD, 0x58), (3, ((std::uint32_t, Align), (std::uint32_t, Offset), (SIMDLaneID, Index))))
X(V128Store16Lane          , "v128.store16_lane"            , SIMD128, (0xFD, 0x59), (3, ((std::uint32_t, Align), (std::uint32_t, Offset), (SIMDLaneID, Index))))
X(V128Store32Lane          , "v128.store32_lane"            , SIMD128, (0xFD, 0x5A), (3, ((std::uint32_t, Align), (std::uint32_t, Offset), (SIMDLaneID, Index))))
X(V128Store64Lane          , "v128.store64_lane"            , SIMD128, (0xFD, 0x5B), (3, ((std::uint32_t, Align), (std::uint32_t, Offset), (SIMDLaneID, Index))))

X(V128Const                , "v128.const"                   , SIMD128, (0xFD, 0x0C), (1, ((V128Value, Value))))

X(I8x16Shuffle             , "i8x16.shuffle"                , SIMD128, (0xFD, 0x0D), (1, ((SIMDLaneIDVector<16>, Indices))))
X(I8x16Swizzle             , "i8x16.swizzle"                , SIMD128, (0xFD, 0x0E), (0, ()))
X(I8x16Splat               , "i8x16.splat"                  , SIMD128, (0xFD, 0x0F), (0, ()))
X(I16x8Splat               , "i16x8.splat"                  , SIMD128, (0xFD, 0x10), (0, ()))
X(I32x4Splat               , "i32x4.splat"                  , SIMD128, (0xFD, 0x11), (0, ()))
X(I64x2Splat               , "i64x2.splat"                  , SIMD128, (0xFD, 0x12), (0, ()))
X(F32x4Splat               , "f32x4.splat"                  , SIMD128, (0xFD, 0x13), (0, ()))
X(F64x2Splat               , "f64x2.splat"                  , SIMD128, (0xFD, 0x14), (0, ()))
X(I8x16ExtractLaneS        , "i8x16.extract_lane_s"         , SIMD128, (0xFD, 0x15), (1, ((SIMDLaneID, Index))))
X(I8x16ExtractLaneU        , "i8x16.extract_lane_u"         , SIMD128, (0xFD, 0x16), (1, ((SIMDLaneID, Index))))
X(I8x16ReplaceLane         , "i8x16.replace_lane"           , SIMD128, (0xFD, 0x17), (1, ((SIMDLaneID, Index))))
X(I16x8ExtractLaneS        , "i16x8.extract_lane_s"         , SIMD128, (0xFD, 0x18), (1, ((SIMDLaneID, Index))))
X(I16x8ExtractLaneU        , "i16x8.extract_lane_u"         , SIMD128, (0xFD, 0x19), (1, ((SIMDLaneID, Index))))
X(I16x8ReplaceLane         , "i16x8.replace_lane"           , SIMD128, (0xFD, 0x1A), (1, ((SIMDLaneID, Index))))
X(I32x4ExtractLane         , "i32x4.extract_lane"           , SIMD128, (0xFD, 0x1B), (1, ((SIMDLaneID, Index))))
X(I32x4ReplaceLane         , "i32x4.replace_lane"           , SIMD128, (0xFD, 0x1C), (1, ((SIMDLaneID, Index))))
X(I64x2ExtractLane         , "i64x2.extract_lane"           , SIMD128, (0xFD, 0x1D), (1, ((SIMDLaneID, Index))))
X(I64x2ReplaceLane         , "i64x2.replace_lane"           , SIMD128, (0xFD, 0x1E), (1, ((SIMDLaneID, Index))))
X(F32x4ExtractLane         , "f32x4.extract_lane"           , SIMD128, (0xFD, 0x1F), (1, ((SIMDLaneID, Index))))
X(F32x4ReplaceLane         , "f32x4.replace_lane"           , SIMD128, (0xFD, 0x20), (1, ((SIMDLaneID, Index))))
X(F64x2ExtractLane         , "f64x2.extract_lane"           , SIMD128, (0xFD, 0x21), (1, ((SIMDLaneID, Index))))
X(F64x2ReplaceLane         , "f64x2.replace_lane"           , SIMD128, (0xFD, 0x22), (1, ((SIMDLaneID, Index))))

X(V128Not                  , "v128.not"                     , SIMD128, (0xFD, 0x4D), (0, ()))
X(V128And                  , "v128.and"                     , SIMD128, (0xFD, 0x4E), (0, ()))
X(V128AndNot               , "v128.andnot"                  , SIMD128, (0xFD, 0x4F), (0, ()))
X(V128Or                   , "v128.or"                      , SIMD128, (0xFD, 0x50), (0, ()))
X(V128Xor                  , "v128.or"                      , SIMD128, (0xFD, 0x51), (0, ()))
X(V128BitSelect            , "v128.bitselect"               , SIMD128, (0xFD, 0x52), (0, ()))
X(V128AnyTrue              , "v128.any_true"                , SIMD128, (0xFD, 0x53), (0, ()))

X(I8x16Eq                  , "i8x16.eq"                     , SIMD128, (0xFD, 0x23), (0, ()))
X(I8x16Ne                  , "i8x16.ne"                     , SIMD128, (0xFD, 0x24), (0, ()))
X(I8x16LtS                 , "i8x16.lt_s"                   , SIMD128, (0xFD, 0x25), (0, ()))
X(I8x16LtU                 , "i8x16.lt_u"                   , SIMD128, (0xFD, 0x26), (0, ()))
X(I8x16GtS                 , "i8x16.gt_s"                   , SIMD128, (0xFD, 0x27), (0, ()))
X(I8x16GtU                 , "i8x16.gt_u"                   , SIMD128, (0xFD, 0x28), (0, ()))
X(I8x16LeS                 , "i8x16.le_s"                   , SIMD128, (0xFD, 0x29), (0, ()))
X(I8x16LeU                 , "i8x16.le_u"                   , SIMD128, (0xFD, 0x2A), (0, ()))
X(I8x16GeS                 , "i8x16.ge_s"                   , SIMD128, (0xFD, 0x2B), (0, ()))
X(I8x16GeU                 , "i8x16.ge_u"                   , SIMD128, (0xFD, 0x2C), (0, ()))
X(I8x16Abs                 , "i8x16.abs"                    , SIMD128, (0xFD, 0x60), (0, ()))
X(I8x16Neg                 , "i8x16.neg"                    , SIMD128, (0xFD, 0x61), (0, ()))
X(I8x16AllTrue             , "i8x16.all_true"               , SIMD128, (0xFD, 0x63), (0, ()))
X(I8x16Bitmask             , "i8x16.bitmask"                , SIMD128, (0xFD, 0x64), (0, ()))
X(I8x16NarrowI16x8S        , "i8x16.narrow_i16x8_s"         , SIMD128, (0xFD, 0x65), (0, ()))
X(I8x16NarrowI16x8U        , "i8x16.narrow_i16x8_u"         , SIMD128, (0xFD, 0x66), (0, ()))
X(I8x16Shl                 , "i8x16.shl"                    , SIMD128, (0xFD, 0x6B), (0, ()))
X(I8x16ShrS                , "i8x16.shr_s"                  , SIMD128, (0xFD, 0x6C), (0, ()))
X(I8x16ShrU                , "i8x16.shr_u"                  , SIMD128, (0xFD, 0x6D), (0, ()))
X(I8x16Add                 , "i8x16.add"                    , SIMD128, (0xFD, 0x6E), (0, ()))
X(I8x16AddSatS             , "i8x16.add_sat_s"              , SIMD128, (0xFD, 0x6F), (0, ()))
X(I8x16AddSatU             , "i8x16.add_sat_u"              , SIMD128, (0xFD, 0x70), (0, ()))
X(I8x16Sub                 , "i8x16.sub"                    , SIMD128, (0xFD, 0x71), (0, ()))
X(I8x16SubSatS             , "i8x16.sub_sat_s"              , SIMD128, (0xFD, 0x72), (0, ()))
X(I8x16SubSatU             , "i8x16.sub_sat_u"              , SIMD128, (0xFD, 0x73), (0, ()))
X(I8x16MinS                , "i8x16.min_s"                  , SIMD128, (0xFD, 0x76), (0, ()))
X(I8x16MinU                , "i8x16.min_u"                  , SIMD128, (0xFD, 0x77), (0, ()))
X(I8x16MaxS                , "i8x16.max_s"                  , SIMD128, (0xFD, 0x78), (0, ()))
X(I8x16MaxU                , "i8x16.max_u"                  , SIMD128, (0xFD, 0x79), (0, ()))
X(I8x16AvgrU               , "i8x16.avgr_u"                 , SIMD128, (0xFD, 0x7B), (0, ()))
X(I8x16Popcnt              , "i8x16.popcnt"                 , SIMD128, (0xFD, 0x62), (0, ()))

X(I16x8Eq                  , "i16x8.eq"                     , SIMD128, (0xFD, 0x2D), (0, ()))
X(I16x8Ne                  , "i16x8.ne"                     , SIMD128, (0xFD, 0x2E), (0, ()))
X(I16x8LtS                 , "i16x8.lt_s"                   , SIMD128, (0xFD, 0x2F), (0, ()))
X(I16x8LtU                 , "i16x8.lt_u"                   , SIMD128, (0xFD, 0x30), (0, ()))
X(I16x8GtS                 , "i16x8.gt_s"                   , SIMD128, (0xFD, 0x31), (0, ()))
X(I16x8GtU                 , "i16x8.gt_u"                   , SIMD128, (0xFD, 0x32), (0, ()))
X(I16x8LeS                 , "i16x8.le_s"                   , SIMD128, (0xFD, 0x33), (0, ()))
X(I16x8LeU                 , "i16x8.le_u"                   , SIMD128, (0xFD, 0x34), (0, ()))
X(I16x8GeS                 , "i16x8.ge_s"                   , SIMD128, (0xFD, 0x35), (0, ()))
X(I16x8GeU                 , "i16x8.ge_u"                   , SIMD128, (0xFD, 0x36), (0, ()))
X(I16x8Abs                 , "i16x8.abs"                    , SIMD128, (0xFD, 0x80), (0, ()))
X(I16x8Neg                 , "i16x8.neg"                    , SIMD128, (0xFD, 0x81), (0, ()))
X(I16x8AllTrue             , "i16x8.all_true"               , SIMD128, (0xFD, 0x83), (0, ()))
X(I16x8Bitmask             , "i16x8.bitmask"                , SIMD128, (0xFD, 0x84), (0, ()))
X(I16x8NarrowI32x4S        , "i16x8.narrow_i32x4_s"         , SIMD128, (0xFD, 0x85), (0, ()))
X(I16x8NarrowI32x4U        , "i16x8.narrow_i32x4_u"         , SIMD128, (0xFD, 0x86), (0, ()))
X(I16x8ExtendLowI8x16S     , "i16x8.extend_low_i8x16_s"     , SIMD128, (0xFD, 0x87), (0, ()))
X(I16x8ExtendHighI8x16S    , "i16x8.extend_high_i8x16_s"    , SIMD128, (0xFD, 0x88), (0, ()))
X(I16x8ExtendLowI8x16U     , "i16x8.extend_low_i8x16_u"     , SIMD128, (0xFD, 0x89), (0, ()))
X(I16x8ExtendHighI8x16U    , "i16x8.extend_high_i8x16_u"    , SIMD128, (0xFD, 0x8A), (0, ()))
X(I16x8Shl                 , "i16x8.shl"                    , SIMD128, (0xFD, 0x8B), (0, ()))
X(I16x8ShrS                , "i16x8.shr_s"                  , SIMD128, (0xFD, 0x8C), (0, ()))
X(I16x8ShrU                , "i16x8.shr_u"                  , SIMD128, (0xFD, 0x8D), (0, ()))
X(I16x8Add                 , "i16x8.add"                    , SIMD128, (0xFD, 0x8E), (0, ()))
X(I16x8AddSatS             , "i16x8.add_sat_s"              , SIMD128, (0xFD, 0x8F), (0, ()))
X(I16x8AddSatU             , "i16x8.add_sat_u"              , SIMD128, (0xFD, 0x90), (0, ()))
X(I16x8Sub                 , "i16x8.sub"                    , SIMD128, (0xFD, 0x91), (0, ()))
X(I16x8SubSatS             , "i16x8.sub_sat_s"              , SIMD128, (0xFD, 0x92), (0, ()))
X(I16x8SubSatU             , "i16x8.sub_sat_u"              , SIMD128, (0xFD, 0x93), (0, ()))
X(I16x8Mul                 , "i16x8.mul"                    , SIMD128, (0xFD, 0x95), (0, ()))
X(I16x8MinS                , "i16x8.min_s"                  , SIMD128, (0xFD, 0x96), (0, ()))
X(I16x8MinU                , "i16x8.min_u"                  , SIMD128, (0xFD, 0x97), (0, ()))
X(I16x8MaxS                , "i16x8.max_s"                  , SIMD128, (0xFD, 0x98), (0, ()))
X(I16x8MaxU                , "i16x8.max_u"                  , SIMD128, (0xFD, 0x99), (0, ()))
X(I16x8AvgrU               , "i16x8.avgr_u"                 , SIMD128, (0xFD, 0x9B), (0, ()))
X(I16x8Q15MulRSatS         , "i16x8.q16mulr_sat_s"          , SIMD128, (0xFD, 0x82), (0, ()))

X(I32x4Eq                  , "i32x4.eq"                     , SIMD128, (0xFD, 0x37), (0, ()))
X(I32x4Ne                  , "i32x4.ne"                     , SIMD128, (0xFD, 0x38), (0, ()))
X(I32x4LtS                 , "i32x4.lt_s"                   , SIMD128, (0xFD, 0x39), (0, ()))
X(I32x4LtU                 , "i32x4.lt_u"                   , SIMD128, (0xFD, 0x3A), (0, ()))
X(I32x4GtS                 , "i32x4.gt_s"                   , SIMD128, (0xFD, 0x3B), (0, ()))
X(I32x4GtU                 , "i32x4.gt_u"                   , SIMD128, (0xFD, 0x3C), (0, ()))
X(I32x4LeS                 , "i32x4.le_s"                   , SIMD128, (0xFD, 0x3D), (0, ()))
X(I32x4LeU                 , "i32x4.le_u"                   , SIMD128, (0xFD, 0x3E), (0, ()))
X(I32x4GeS                 , "i32x4.ge_s"                   , SIMD128, (0xFD, 0x3F), (0, ()))
X(I32x4GeU                 , "i32x4.ge_u"                   , SIMD128, (0xFD, 0x40), (0, ()))
X(I32x4Abs                 , "i32x4.abs"                    , SIMD128, (0xFD, 0xA0), (0, ()))
X(I32x4Neg                 , "i32x4.neg"                    , SIMD128, (0xFD, 0xA1), (0, ()))
X(I32x4AllTrue             , "i32x4.all_true"               , SIMD128, (0xFD, 0xA3), (0, ()))
X(I32x4Bitmask             , "i32x4.bitmask"                , SIMD128, (0xFD, 0xA4), (0, ()))
X(I32x4ExtendLowI16x8S     , "i32x4.extend_low_i16x8_s"     , SIMD128, (0xFD, 0xA7), (0, ()))
X(I32x4ExtendHighI16x8S    , "i32x4.extend_high_i16x8_s"    , SIMD128, (0xFD, 0xA8), (0, ()))
X(I32x4ExtendLowI16x8U     , "i32x4.extend_low_i16x8_u"     , SIMD128, (0xFD, 0xA9), (0, ()))
X(I32x4ExtendHighI16x8U    , "i32x4.extend_high_i16x8_u"    , SIMD128, (0xFD, 0xAA), (0, ()))
X(I32x4Shl                 , "i32x4.shl"                    , SIMD128, (0xFD, 0xAB), (0, ()))
X(I32x4ShrS                , "i32x4.shr_s"                  , SIMD128, (0xFD, 0xAC), (0, ()))
X(I32x4ShrU                , "i32x4.shr_u"                  , SIMD128, (0xFD, 0xAD), (0, ()))
X(I32x4Add                 , "i32x4.add"                    , SIMD128, (0xFD, 0xAE), (0, ()))
X(I32x4Sub                 , "i32x4.sub"                    , SIMD128, (0xFD, 0xB1), (0, ()))
X(I32x4Mul                 , "i32x4.mul"                    , SIMD128, (0xFD, 0xB5), (0, ()))
X(I32x4MinS                , "i32x4.min_s"                  , SIMD128, (0xFD, 0xB6), (0, ()))
X(I32x4MinU                , "i32x4.min_u"                  , SIMD128, (0xFD, 0xB7), (0, ()))
X(I32x4MaxS                , "i32x4.max_s"                  , SIMD128, (0xFD, 0xB8), (0, ()))
X(I32x4MaxU                , "i32x4.max_u"                  , SIMD128, (0xFD, 0xB9), (0, ()))
X(I32x4DotI16x8S           , "i32x4.dot_i16x8_s"            , SIMD128, (0xFD, 0xBA), (0, ()))

X(I64x2Eq                  , "i64x2.eq"                     , SIMD128, (0xFD, 0xD6), (0, ()))
X(I64x2Ne                  , "i64x2.ne"                     , SIMD128, (0xFD, 0xD7), (0, ()))
X(I64x2LtS                 , "i64x2.lt_s"                   , SIMD128, (0xFD, 0xD8), (0, ()))
X(I64x2GtS                 , "i64x2.gt_s"                   , SIMD128, (0xFD, 0xD9), (0, ()))
X(I64x2LeS                 , "i64x2.le_s"                   , SIMD128, (0xFD, 0xDA), (0, ()))
X(I64x2GeS                 , "i64x2.ge_s"                   , SIMD128, (0xFD, 0xDB), (0, ()))
X(I64x2AllTrue             , "i64x2.all_true"               , SIMD128, (0xFD, 0xC3), (0, ()))
X(I64x2Abs                 , "i64x2.abs"                    , SIMD128, (0xFD, 0xC0), (0, ()))
X(I64x2Neg                 , "i64x2.neg"                    , SIMD128, (0xFD, 0xC1), (0, ()))
X(I64x2Bitmask             , "i64x2.bitmask"                , SIMD128, (0xFD, 0xC4), (0, ()))
X(I64x2ExtendLowI32x4S     , "i64x2.extend_low_i32x4_s"     , SIMD128, (0xFD, 0xC7), (0, ()))
X(I64x2ExtendHighI32x4S    , "i64x2.extend_high_i32x4_s"    , SIMD128, (0xFD, 0xC8), (0, ()))
X(I64x2ExtendLowI32x4U     , "i64x2.extend_low_i32x4_u"     , SIMD128, (0xFD, 0xC9), (0, ()))
X(I64x2ExtendHighI32x4U    , "i64x2.extend_high_i32x4_u"    , SIMD128, (0xFD, 0xCA), (0, ()))
X(I64x2Shl                 , "i64x2.shl"                    , SIMD128, (0xFD, 0xCB), (0, ()))
X(I64x2ShrS                , "i64x2.shr_s"                  , SIMD128, (0xFD, 0xCC), (0, ()))
X(I64x2ShrU                , "i64x2.shr_u"                  , SIMD128, (0xFD, 0xCD), (0, ()))
X(I64x2Add                 , "i64x2.add"                    , SIMD128, (0xFD, 0xCE), (0, ()))
X(I64x2Sub                 , "i64x2.sub"                    , SIMD128, (0xFD, 0xD1), (0, ()))
X(I64x2Mul                 , "i64x2.mul"                    , SIMD128, (0xFD, 0xD5), (0, ()))

X(F32x4Eq                  , "f32x4.eq"                     , SIMD128, (0xFD, 0x41), (0, ()))
X(F32x4Ne                  , "f32x4.ne"                     , SIMD128, (0xFD, 0x42), (0, ()))
X(F32x4Lt                  , "f32x4.lt"                     , SIMD128, (0xFD, 0x43), (0, ()))
X(F32x4Gt                  , "f32x4.gt"                     , SIMD128, (0xFD, 0x44), (0, ()))
X(F32x4Le                  , "f32x4.le"                     , SIMD128, (0xFD, 0x45), (0, ()))
X(F32x4Ge                  , "f32x4.ge"                     , SIMD128, (0xFD, 0x46), (0, ()))
X(F32x4Ceil                , "f32x4.ceil"                   , SIMD128, (0xFD, 0x67), (0, ()))
X(F32x4Floor               , "f32x4.floor"                  , SIMD128, (0xFD, 0x68), (0, ()))
X(F32x4Trunc               , "f32x4.trunc"                  , SIMD128, (0xFD, 0x69), (0, ()))
X(F32x4Nearest             , "f32x4.nearest"                , SIMD128, (0xFD, 0x6A), (0, ()))
X(F32x4Abs                 , "f32x4.abs"                    , SIMD128, (0xFD, 0xE0), (0, ()))
X(F32x4Neg                 , "f32x4.neg"                    , SIMD128, (0xFD, 0xE1), (0, ()))
X(F32x4Sqrt                , "f32x4.sqrt"                   , SIMD128, (0xFD, 0xE3), (0, ()))
X(F32x4Add                 , "f32x4.add"                    , SIMD128, (0xFD, 0xE4), (0, ()))
X(F32x4Sub                 , "f32x4.sub"                    , SIMD128, (0xFD, 0xE5), (0, ()))
X(F32x4Mul                 , "f32x4.mul"                    , SIMD128, (0xFD, 0xE6), (0, ()))
X(F32x4Div                 , "f32x4.div"                    , SIMD128, (0xFD, 0xE7), (0, ()))
X(F32x4Min                 , "f32x4.min"                    , SIMD128, (0xFD, 0xE8), (0, ()))
X(F32x4Max                 , "f32x4.max"                    , SIMD128, (0xFD, 0xE9), (0, ()))
X(F32x4PMin                , "f32x4.pmin"                   , SIMD128, (0xFD, 0xEA), (0, ()))
X(F32x4PMax                , "f32x4.pmax"                   , SIMD128, (0xFD, 0xEB), (0, ()))

X(F64x2Eq                  , "f64x2.eq"                     , SIMD128, (0xFD, 0x47), (0, ()))
X(F64x2Ne                  , "f64x2.ne"                     , SIMD128, (0xFD, 0x48), (0, ()))
X(F64x2Lt                  , "f64x2.lt"                     , SIMD128, (0xFD, 0x49), (0, ()))
X(F64x2Gt                  , "f64x2.gt"                     , SIMD128, (0xFD, 0x4A), (0, ()))
X(F64x2Le                  , "f64x2.le"                     , SIMD128, (0xFD, 0x4B), (0, ()))
X(F64x2Ge                  , "f64x2.ge"                     , SIMD128, (0xFD, 0x4C), (0, ()))
X(F64x2Ceil                , "f64x2.ceil"                   , SIMD128, (0xFD, 0x74), (0, ()))
X(F64x2Floor               , "f64x2.floor"                  , SIMD128, (0xFD, 0x75), (0, ()))
X(F64x2Trunc               , "f64x2.trunc"                  , SIMD128, (0xFD, 0x7A), (0, ()))
X(F64x2Nearest             , "f64x2.nearest"                , SIMD128, (0xFD, 0x94), (0, ()))
X(F64x2Abs                 , "f64x2.abs"                    , SIMD128, (0xFD, 0xEC), (0, ()))
X(F64x2Neg                 , "f64x2.neg"                    , SIMD128, (0xFD, 0xED), (0, ()))
X(F64x2Sqrt                , "f64x2.sqrt"                   , SIMD128, (0xFD, 0xEF), (0, ()))
X(F64x2Add                 , "f64x2.add"                    , SIMD128, (0xFD, 0xF0), (0, ()))
X(F64x2Sub                 , "f64x2.sub"                    , SIMD128, (0xFD, 0xF1), (0, ()))
X(F64x2Mul                 , "f64x2.mul"                    , SIMD128, (0xFD, 0xF2), (0, ()))
X(F64x2Div                 , "f64x2.div"                    , SIMD128, (0xFD, 0xF3), (0, ()))
X(F64x2Min                 , "f64x2.min"                    , SIMD128, (0xFD, 0xF4), (0, ()))
X(F64x2Max                 , "f64x2.max"                    , SIMD128, (0xFD, 0xF5), (0, ()))
X(F64x2PMin                , "f64x2.pmin"                   , SIMD128, (0xFD, 0xF6), (0, ()))
X(F64x2PMax                , "f64x2.pmax"                   , SIMD128, (0xFD, 0xF7), (0, ()))

X(I32x4TruncSatF32x4S      , "i32x4.trunc_sat_f32x4_s"      , SIMD128, (0xFD, 0xF8), (0, ()))
X(I32x4TruncSatF32x4U      , "i32x4.trunc_sat_f32x4_u"      , SIMD128, (0xFD, 0xF9), (0, ()))
X(F32x4ConvertI32x4S       , "f32x4.convert_i32x4_s"        , SIMD128, (0xFD, 0xFA), (0, ()))
X(F32x4ConvertI32x4U       , "f32x4.convert_i32x4_u"        , SIMD128, (0xFD, 0xFB), (0, ()))
X(F64x2ConvertLowI32x4S    , "f64x2.convert_low_i32x4_s"    , SIMD128, (0xFD, 0xFE), (0, ()))
X(F64x2ConvertLowI32x4U    , "f64x2.convert_low_i32x4_u"    , SIMD128, (0xFD, 0xFF), (0, ()))
X(I32x4TruncSatF64x2SZero  , "i32x4.trunc_sat_f64x2_s_zero" , SIMD128, (0xFD, 0xFC), (0, ()))
X(I32x4TruncSatF64x2UZero  , "i32x4.trunc_sat_f64x2_u_zero" , SIMD128, (0xFD, 0xFD), (0, ()))
X(F32x4DemoteF64x2Zero     , "f32x4.demote_f64x2_zero"      , SIMD128, (0xFD, 0x5E), (0, ()))
X(F64x2PromoteLowF32x4     , "f64x2.promote_low_f32x4"      , SIMD128, (0xFD, 0x5F), (0, ()))

X(I16x8ExtMulLowI8x16S     , "i16x8.extmul_low_i8x16_s"     , SIMD128, (0xFD, 0x9C), (0, ()))
X(I16x8ExtMulHighI8x16S    , "i16x8.extmul_high_i8x16_s"    , SIMD128, (0xFD, 0x9D), (0, ()))
X(I16x8ExtMulLowI8x16U     , "i16x8.extmul_low_i8x16_u"     , SIMD128, (0xFD, 0x9E), (0, ()))
X(I16x8ExtMulHighI8x16U    , "i16x8.extmul_high_i8x16_u"    , SIMD128, (0xFD, 0x9F), (0, ()))
X(I32x4ExtMulLowI16x8S     , "i32x4.extmul_low_i16x8_s"     , SIMD128, (0xFD, 0xBC), (0, ()))
X(I32x4ExtMulHighI16x8S    , "i32x4.extmul_high_i16x8_s"    , SIMD128, (0xFD, 0xBD), (0, ()))
X(I32x4ExtMulLowI16x8U     , "i32x4.extmul_low_i16x8_u"     , SIMD128, (0xFD, 0xBE), (0, ()))
X(I32x4ExtMulHighI16x8U    , "i32x4.extmul_high_i16x8_u"    , SIMD128, (0xFD, 0xBF), (0, ()))
X(I64x2ExtMulLowI32x4S     , "i64x2.extmul_low_i32x4_s"     , SIMD128, (0xFD, 0xDC), (0, ()))
X(I64x2ExtMulHighI32x4S    , "i64x2.extmul_high_i32x4_s"    , SIMD128, (0xFD, 0xDD), (0, ()))
X(I64x2ExtMulLowI32x4U     , "i64x2.extmul_low_i32x4_u"     , SIMD128, (0xFD, 0xDE), (0, ()))
X(I64x2ExtMulHighI32x4U    , "i64x2.extmul_high_i32x4_u"    , SIMD128, (0xFD, 0xDF), (0, ()))
X(I16x8ExtAddPairwiseI8x16S, "i16x8.extadd_pairwise_i8x16_s", SIMD128, (0xFD, 0x7C), (0, ()))
X(I16x8ExtAddPairwiseI8x16U, "i16x8.extadd_pairwise_i8x16_u", SIMD128, (0xFD, 0x7D), (0, ()))
X(I32x4ExtAddPairwiseI16x8S, "i32x4.extadd_pairwise_i16x8_s", SIMD128, (0xFD, 0x7E), (0, ()))
X(I32x4ExtAddPairwiseI16x8U, "i32x4.extadd_pairwise_i16x8_u", SIMD128, (0xFD, 0x7F), (0, ()))
#endif